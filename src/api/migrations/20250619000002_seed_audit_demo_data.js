/**
 * Seed demo audit data aligned with existing demo users and properties
 * Creates realistic audit events that would be generated by normal system usage
 * 
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.up = async function(knex) {
  // Get demo users for foreign key references
  const adminUser = await knex('users').where('email', 'admin@trusted360.com').first();
  const demoUser = await knex('users').where('email', 'user@trusted360.com').first();
  
  if (!adminUser || !demoUser) {
    console.log('⚠️  Demo users not found, skipping audit seed data');
    return;
  }

  // Get demo properties for foreign key references
  const properties = await knex('properties').select('id', 'name');
  const officeProperty = properties.find(p => p.name === 'Downtown Office Complex');
  const residentialProperty = properties.find(p => p.name === 'Riverside Apartments');
  const industrialProperty = properties.find(p => p.name === 'Industrial Warehouse');

  // Get checklist templates for foreign key references
  const templates = await knex('checklist_templates').select('id', 'name');
  const safetyTemplate = templates.find(t => t.name === 'Monthly Safety Inspection');
  const fireTemplate = templates.find(t => t.name === 'Quarterly Fire Safety Check');
  const residentialTemplate = templates.find(t => t.name === 'Residential Unit Inspection');

  // Get video alerts for foreign key references
  const videoAlerts = await knex('video_alerts').select('id', 'camera_id', 'alert_type_id');

  // Check if audit demo data already exists
  const existingAuditLogs = await knex('audit_logs').select('id').limit(1);
  if (existingAuditLogs.length > 0) {
    console.log('⚠️  Audit demo data already exists, skipping');
    return;
  }

  // Get audit event types for foreign key references
  const eventTypes = await knex('audit_event_types').select('id', 'category', 'action');
  
  const authLoginType = eventTypes.find(et => et.category === 'auth' && et.action === 'login');
  const authLogoutType = eventTypes.find(et => et.category === 'auth' && et.action === 'logout');
  const checklistCreatedType = eventTypes.find(et => et.category === 'checklist' && et.action === 'created');
  const checklistCompletedType = eventTypes.find(et => et.category === 'checklist' && et.action === 'completed');
  const videoAlertType = eventTypes.find(et => et.category === 'video' && et.action === 'alert_triggered');
  const videoAcknowledgedType = eventTypes.find(et => et.category === 'video' && et.action === 'alert_acknowledged');
  const systemAccessType = eventTypes.find(et => et.category === 'system' && et.action === 'accessed');

  const demoAuditLogs = [];
  const now = new Date();

  // Create realistic audit events over the past week
  const timeOffsets = [
    { hours: 168, desc: '1 week ago' },    // 7 days
    { hours: 144, desc: '6 days ago' },    // 6 days
    { hours: 120, desc: '5 days ago' },    // 5 days
    { hours: 96, desc: '4 days ago' },     // 4 days
    { hours: 72, desc: '3 days ago' },     // 3 days
    { hours: 48, desc: '2 days ago' },     // 2 days
    { hours: 24, desc: '1 day ago' },      // 1 day
    { hours: 8, desc: '8 hours ago' },     // Today morning
    { hours: 4, desc: '4 hours ago' },     // Today afternoon
    { hours: 2, desc: '2 hours ago' },     // Recent
    { hours: 1, desc: '1 hour ago' },      // Very recent
    { hours: 0.5, desc: '30 minutes ago' } // Just happened
  ];

  // 1. Authentication Events (most common)
  timeOffsets.forEach((offset, index) => {
    const eventTime = new Date(now.getTime() - (offset.hours * 60 * 60 * 1000));
    
    // Admin login events
    if (authLoginType && index % 2 === 0) {
      demoAuditLogs.push({
        event_type_id: authLoginType.id,
        user_id: adminUser.id,
        tenant_id: 'default',
        action: 'login',
        description: 'Admin user logged in successfully',
        metadata: JSON.stringify({
          demo: true,
          user_agent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
          login_method: 'email_password',
          session_duration_minutes: Math.floor(Math.random() * 120) + 30
        }),
        ip_address: '192.168.1.100',
        created_at: eventTime
      });
    }

    // Demo user login events
    if (authLoginType && index % 3 === 0) {
      demoAuditLogs.push({
        event_type_id: authLoginType.id,
        user_id: demoUser.id,
        tenant_id: 'default',
        action: 'login',
        description: 'Demo user logged in successfully',
        metadata: JSON.stringify({
          demo: true,
          user_agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          login_method: 'email_password',
          session_duration_minutes: Math.floor(Math.random() * 90) + 20
        }),
        ip_address: '192.168.1.101',
        created_at: eventTime
      });
    }

    // Logout events (less frequent)
    if (authLogoutType && index % 4 === 0) {
      demoAuditLogs.push({
        event_type_id: authLogoutType.id,
        user_id: index % 2 === 0 ? adminUser.id : demoUser.id,
        tenant_id: 'default',
        action: 'logout',
        description: 'User logged out',
        metadata: JSON.stringify({
          demo: true,
          logout_type: 'manual',
          session_duration_minutes: Math.floor(Math.random() * 120) + 15
        }),
        ip_address: index % 2 === 0 ? '192.168.1.100' : '192.168.1.101',
        created_at: new Date(eventTime.getTime() + (Math.random() * 2 * 60 * 60 * 1000)) // 0-2 hours after login
      });
    }
  });

  // 2. Checklist Events (business operations)
  if (checklistCreatedType && safetyTemplate && officeProperty) {
    demoAuditLogs.push({
      event_type_id: checklistCreatedType.id,
      user_id: adminUser.id,
      tenant_id: 'default',
      property_id: officeProperty.id,
      entity_type: 'checklist',
      entity_id: '1',
      action: 'created',
      description: 'Monthly safety inspection checklist created for Downtown Office Complex',
      metadata: JSON.stringify({
        demo: true,
        template_id: safetyTemplate.id,
        template_name: 'Monthly Safety Inspection',
        assigned_to: demoUser.id,
        due_date: new Date(now.getTime() + (7 * 24 * 60 * 60 * 1000)).toISOString(), // Due in 1 week
        priority: 'high'
      }),
      created_at: new Date(now.getTime() - (6 * 60 * 60 * 1000)) // 6 hours ago
    });
  }

  if (checklistCompletedType && fireTemplate && residentialProperty) {
    demoAuditLogs.push({
      event_type_id: checklistCompletedType.id,
      user_id: demoUser.id,
      tenant_id: 'default',
      property_id: residentialProperty.id,
      entity_type: 'checklist',
      entity_id: '2',
      action: 'completed',
      description: 'Fire safety checklist completed for Riverside Apartments',
      metadata: JSON.stringify({
        demo: true,
        template_id: fireTemplate.id,
        template_name: 'Quarterly Fire Safety Check',
        completion_time_minutes: 45,
        items_completed: 7,
        items_total: 7,
        requires_approval: true,
        inspector_signature: true
      }),
      created_at: new Date(now.getTime() - (3 * 60 * 60 * 1000)) // 3 hours ago
    });
  }

  // 3. Video Analysis Events (security operations)
  if (videoAlertType && videoAlerts.length > 0) {
    const alert = videoAlerts[0];
    demoAuditLogs.push({
      event_type_id: videoAlertType.id,
      user_id: null, // System generated
      tenant_id: 'default',
      property_id: officeProperty?.id,
      entity_type: 'video_alert',
      entity_id: alert.id.toString(),
      action: 'alert_triggered',
      description: 'Unauthorized access detected by AI video analysis',
      metadata: JSON.stringify({
        demo: true,
        camera_id: alert.camera_id,
        alert_type_id: alert.alert_type_id,
        ai_confidence: 0.92,
        severity: 'high',
        auto_actions: ['notification_sent', 'checklist_created'],
        detection_area: 'main_entrance'
      }),
      created_at: new Date(now.getTime() - (2 * 60 * 60 * 1000)) // 2 hours ago
    });

    if (videoAcknowledgedType) {
      demoAuditLogs.push({
        event_type_id: videoAcknowledgedType.id,
        user_id: adminUser.id,
        tenant_id: 'default',
        property_id: officeProperty?.id,
        entity_type: 'video_alert',
        entity_id: alert.id.toString(),
        action: 'alert_acknowledged',
        description: 'Video alert acknowledged by security team',
        metadata: JSON.stringify({
          demo: true,
          response_time_minutes: 15,
          action_taken: 'Security contacted, area checked',
          false_positive: false,
          follow_up_required: true
        }),
        created_at: new Date(now.getTime() - (1.75 * 60 * 60 * 1000)) // 1 hour 45 minutes ago
      });
    }
  }

  // 4. System Access Events (administrative)
  if (systemAccessType) {
    demoAuditLogs.push({
      event_type_id: systemAccessType.id,
      user_id: adminUser.id,
      tenant_id: 'default',
      action: 'accessed',
      description: 'Admin portal accessed for system configuration',
      metadata: JSON.stringify({
        demo: true,
        section: 'user_management',
        action_performed: 'view_user_list',
        duration_minutes: 12
      }),
      ip_address: '192.168.1.100',
      created_at: new Date(now.getTime() - (5 * 60 * 60 * 1000)) // 5 hours ago
    });

    demoAuditLogs.push({
      event_type_id: systemAccessType.id,
      user_id: demoUser.id,
      tenant_id: 'default',
      action: 'accessed',
      description: 'User accessed property dashboard',
      metadata: JSON.stringify({
        demo: true,
        section: 'property_dashboard',
        properties_viewed: [officeProperty?.id, residentialProperty?.id].filter(Boolean),
        duration_minutes: 8
      }),
      ip_address: '192.168.1.101',
      created_at: new Date(now.getTime() - (1 * 60 * 60 * 1000)) // 1 hour ago
    });
  }

  // Insert all demo audit logs
  if (demoAuditLogs.length > 0) {
    await knex('audit_logs').insert(demoAuditLogs);
    console.log(`✅ Created ${demoAuditLogs.length} demo audit log entries`);
  }

  // Note: Operational metrics will be created by the audit service automatically
  // when audit events are processed. No need to seed them manually.

  console.log('🎉 Audit demo data seeding completed successfully');
};

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> }
 */
exports.down = async function(knex) {
  // Clean up audit demo data
  await knex('operational_metrics').del();
  await knex('audit_logs').del();
  console.log('🗑️  Removed all audit demo data');
};
