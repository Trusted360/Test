version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: trusted360-postgres
    environment:
      POSTGRES_USER: trusted360
      POSTGRES_PASSWORD: trusted360_password
      POSTGRES_DB: trusted360
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - trusted360-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trusted360"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: trusted360-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trusted360-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Traefik for routing
  traefik:
    image: traefik:v2.10
    container_name: trusted360-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:8090"
      - "--entrypoints.websecure.address=:8443"
    ports:
      - "8090:8090"
      - "8443:8443"
      - "8081:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik
    networks:
      - trusted360-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`trusted360.home`) && PathPrefix(`/dashboard`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=web"

  # API Service
  api:
    build:
      context: ./src/api
      dockerfile: Dockerfile
    container_name: trusted360-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3000"
    command: npm start
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://trusted360:trusted360_password@postgres:5432/trusted360
      REDIS_URL: redis://redis:6379
      SKIP_MIGRATIONS: "true"
      # OLLAMA_URL: http://ollama-backend:11434  # Commented out - was on external network
    volumes:
      - ./src/api/src:/app/src
      - ./src/api/package.json:/app/package.json
      - ./src/api/package-lock.json:/app/package-lock.json
      - ./src/api/knexfile.js:/app/knexfile.js
      - ./src/api/migrations:/app/migrations
      - /app/node_modules
      - recipe_images:/app/storage/images
    networks:
      - trusted360-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "node"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trusted360-api.rule=Host(`trusted360.home`) && PathPrefix(`/api`)"
      - "traefik.http.routers.trusted360-api.entrypoints=web"
      - "traefik.http.services.trusted360-api.loadbalancer.server.port=3000"
      # Add a router for serving images directly
      - "traefik.http.routers.trusted360-images.rule=Host(`trusted360.home`) && PathPrefix(`/images`)"
      - "traefik.http.routers.trusted360-images.entrypoints=web"
      - "traefik.http.routers.trusted360-images.middlewares=images-stripprefix"
      - "traefik.http.middlewares.images-stripprefix.stripprefix.prefixes=/images"
      - "traefik.http.routers.trusted360-images.service=trusted360-images"
      - "traefik.http.services.trusted360-images.loadbalancer.server.port=3000"

  # Web UI
  dashboard:
    build:
      context: ./src/dashboard
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=/api
    container_name: trusted360-web
    depends_on:
      - api
    ports:
      - "8088:80"
    environment:
      - VITE_API_URL=/api
      - NODE_ENV=production
    networks:
      - trusted360-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.trusted360-web.rule=Host(`trusted360.home`)"
      - "traefik.http.routers.trusted360-web.entrypoints=web"
      - "traefik.http.services.trusted360-web.loadbalancer.server.port=80"

networks:
  # Internal network for Trusted360 services
  trusted360-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  recipe_images:
